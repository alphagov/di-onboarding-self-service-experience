AWSTemplateFormatVersion: 2010-09-09
Description: >-
  dynamo-api
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  AuthRegistrationBaseUrl:
    Type: String
    Description: API Gateway endpoint for client registration
  DynamoDbTableStackName:
    Type: String
    Description: The name of the stack exporting the table we want

Resources:

  putUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-user.putUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
                   'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /put-user
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-user.ts

  getUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-user.getUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Retrieve a user item from the table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-user
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-user.ts

  putServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-service.putServiceHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add a service to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Events:
        Api:
          Type: Api
          Properties:
            Path: /put-service
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-service.ts

  getServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-services.getServicesHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return services related to a given userId.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'

      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-services/{userId}
            Method: GET

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-services.ts

  getServiceClientsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/get-service-clients.getServiceClientsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Return services related to a given userId.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'

      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-service-clients/{serviceId}
            Method: GET

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/get-service-clients.ts

  registerClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/register-client.registerClientHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Assumes a cross-account role and invokes the Auth register lambda
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: !Ref AuthRegistrationBaseUrl

      Events:
        Api:
          Type: Api
          Properties:
            Path: /regsiter-client
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/register-client.ts

  updateClientInRegistryFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-client-in-registry.updateClientInRegistryHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Updates a client using http endpoint
      Environment:
        Variables:
          AUTH_REGISTRATION_BASE_URL: !Ref AuthRegistrationBaseUrl

      Events:
        Api:
          Type: Api
          Properties:
            Path: /update-client
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/update-client-in-registry.ts

  putServiceClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-service-client.putServiceClientHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add a service to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-service-client.ts

  updateServiceClientFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/update-service-client.updateServiceClientHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: Update service client in DDB.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/update-service-client.ts

  putServiceUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/put-service-user.putServiceUserHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add a service to a DynamoDB table.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !ImportValue
              'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
      Environment:
        Variables:
          TABLE: !ImportValue
            'Fn::Sub': '${DynamoDbTableStackName}-Self-Service-table'
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/put-service-user.ts

  newServiceHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/new-service.newServiceHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A invokes a step function and returns the output through the API Gateway.
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt NewServiceStepFunction.Arn
      Policies:
        Statement: [
          {
            Effect: Allow,
            Action: [
                "states:StartSyncExecution"
            ],
            Resource: {
              Fn::Sub: [
                  "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${stateMachineName}",
                  {
                    stateMachineName: {
                      Fn::GetAtt: [NewServiceStepFunction, Name]
                  }
                }
              ]
            }
          }
        ]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /new-service
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/new-service.ts

  newClientHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/new-client.newClientHandler
      Runtime: nodejs14.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A invokes a step function and returns the output through the API Gateway.
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt NewClientStepFunction.Arn
      Policies:
        Statement: [
          {
            Effect: Allow,
            Action: [
                "states:StartSyncExecution"
            ],
            Resource: {
              Fn::Sub: [
                  "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${stateMachineName}",
                {
                  stateMachineName: {
                    Fn::GetAtt: [NewClientStepFunction, Name]
                  }
                }
              ]
            }
          }
        ]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /new-client
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/new-client.ts

  doUpdateClientHandler:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/do-update-client.doUpdateClientHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A invokes a step function and returns the output through the API Gateway.
      Environment:
        Variables:
          STATE_MACHINE_ARN: !GetAtt UpdateClientStepFunction.Arn
      Policies:
        Statement: [
          {
            Effect: Allow,
            Action: [
                "states:StartSyncExecution"
            ],
            Resource: {
              Fn::Sub: [
                  "arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${stateMachineName}",
                {
                  stateMachineName: {
                    Fn::GetAtt: [UpdateClientStepFunction, Name]
                  }
                }
              ]
            }
          }
        ]
      Events:
        Api:
          Type: Api
          Properties:
            Path: /do-update-client
            Method: POST

    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/handlers/do-update-client.ts

  StepFunctionExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub "states.${AWS::Region}.amazonaws.com"
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: StepFunctionExecRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogDelivery
                  - logs:GetLogDelivery
                  - logs:UpdateLogDelivery
                  - logs:DeleteLogDelivery
                  - logs:ListLogDeliveries
                  - logs:PutResourcePolicy
                  - logs:DescribeResourcePolicies
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt putServiceFunction.Arn
                  - !GetAtt putServiceUserFunction.Arn
                  - !GetAtt registerClientFunction.Arn
                  - !GetAtt putServiceClientFunction.Arn
                  - !GetAtt updateServiceClientFunction.Arn
                  - !GetAtt updateClientInRegistryFunction.Arn

  NewServiceStepFunction:
    Type: AWS::Serverless::StateMachine
    DependsOn:
      - StepFunctionsLogGroup
      - StepFunctionExecRole

    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: ./src/state-machines/newService.json
      DefinitionSubstitutions:
        PutServiceFunctionArn: !GetAtt putServiceFunction.Arn
        PutServiceUserFunctionArn: !GetAtt putServiceUserFunction.Arn

  NewClientStepFunction:
    Type: AWS::Serverless::StateMachine
    DependsOn:
      - StepFunctionsLogGroup
      - StepFunctionExecRole

    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: ./src/state-machines/newClient.json
      DefinitionSubstitutions:
        RegisterClientFunctionArn: !GetAtt registerClientFunction.Arn
        PutServiceClientFunctionArn: !GetAtt putServiceClientFunction.Arn

  UpdateClientStepFunction:
    Type: AWS::Serverless::StateMachine
    DependsOn:
      - StepFunctionsLogGroup
      - StepFunctionExecRole

    Properties:
      Type: EXPRESS
      Role: !GetAtt StepFunctionExecRole.Arn
      Logging:
        Level: ALL
        IncludeExecutionData: True
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt StepFunctionsLogGroup.Arn
      DefinitionUri: ./src/state-machines/updateClient.json
      DefinitionSubstitutions:
        UpdateClientInRegistryFunctionArn: !GetAtt updateClientInRegistryFunction.Arn
        UpdateServiceClientFunctionArn: !GetAtt updateServiceClientFunction.Arn

  StepFunctionsLogGroup:
    Type: AWS::Logs::LogGroup

Outputs:
  ApiBaseUrl:
    Description: "API base URL - URL used by Express frontend - supplied as an env var."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com"
